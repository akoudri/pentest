"""
On importe les modules nécessaires : nmap pour le scan, csv pour la génération de rapports CSV, et datetime pour créer
des noms de fichiers uniques.
On définit une fonction scan_host qui prend une adresse IP et une liste de ports en entrée.
On initialise un scanner nmap et on lance un scan TCP connect avec détection de version sur les ports spécifiés pour l'hôte cible.
On crée un nom de fichier unique pour le rapport CSV en combinant l'adresse IP et l'horodatage actuel.
On ouvre un fichier CSV en écriture avec le nom généré, et on écrit l'en-tête.
On itère sur les protocoles détectés (tcp, udp), puis sur les ports ouverts pour chaque protocole.
Pour chaque port, on écrit une ligne dans le fichier CSV avec l'IP, le port, l'état, le nom du service et sa version
s'ils sont disponibles.
On affiche un message de confirmation avec le nom du fichier de rapport généré.
On spécifie les hôtes cibles soit dans une liste directement dans le code, soit en les lisant depuis un fichier externe.
On spécifie les ports à scanner dans une chaîne de caractères séparés par des virgules.
On itère sur chaque hôte cible et on appelle la fonction scan_host avec l'hôte et les ports.
Ce script effectue donc un scan TCP connect sur les ports spécifiés pour chaque hôte cible, et génère un rapport
CSV détaillé pour chaque hôte, avec un nom de fichier unique basé sur l'IP et l'horodatage.
"""

import nmap
import csv
from datetime import datetime


def scan_host(host, ports):
    nm = nmap.PortScanner()
    nm.scan(host, ports, arguments='-sV')

    # Créer un nom de fichier unique basé sur l'adresse IP et l'horodatage
    filename = f"{host}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"

    with open(filename, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['IP', 'Port', 'State', 'Service', 'Version'])

        for proto in nm[host].all_protocols():
            lport = nm[host][proto].keys()

            for port in lport:
                writer.writerow([
                    host,
                    port,
                    nm[host][proto][port]['state'],
                    nm[host][proto][port]['name'],
                    nm[host][proto][port]['version']
                ])

    print(f"Le scan de {host} est terminé. Résultats sauvegardés dans {filename}")


# Lire les hôtes cibles depuis un fichier ou les spécifier dans une liste
hosts = [
    '192.168.1.1',
    '192.168.1.2',
    '192.168.1.3'
]

# Spécifier les ports à scanner
ports = '80,443,22,8080'

for host in hosts:
    scan_host(host, ports)