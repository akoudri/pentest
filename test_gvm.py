#from gvm.connections import UnixSocketConnection
from gvm.connections import TLSConnection
from gvm.protocols.latest import Gmp
from gvm.transforms import EtreeTransform
from gvm.xml import pretty_print

# Établir une connexion locale à OpenVAS
# connection = UnixSocketConnection()
connection = TLSConnection(hostname='192.168.221.163', port=9392, password='b7338ac4-f405-4218-95cc-740895126368')

# Utiliser une transformation pour gérer les réponses XML
transform = EtreeTransform()

# Utiliser le contexte 'with' pour gérer automatiquement la connexion et la déconnexion
with Gmp(connection=connection, transform=transform) as gmp:
    # Authentification avec le nom d'utilisateur et le mot de passe de l'administrateur
    # gmp.authenticate('admin', 'b7338ac4-f405-4218-95cc-740895126368')

    # Exemple pour récupérer la version du serveur GMP
    version = gmp.get_version()
    pretty_print(version)

    # Pour lancer un scan, il faut d'abord créer une tâche (task)
    # Voici un exemple simplifié pour créer et lancer une tâche de scan

    # Créer une tâche de scan (remplacer par les paramètres réels nécessaires)
    task_id = gmp.create_task(
        name='Example Scan 2',
        scanner_id='08b69003-5fc2-4037-a479-93b440211c73',  # ID du scanner OpenVAS
        config_id='daba56c8-73ec-11df-a475-002264764cea',  # ID de configuration du scan (ex: Full and fast)
        target_id='e0aa385d-fab6-44ad-ba8c-61996cbddd42'  # ID du target à scanner

    ).get('id')

    # Démarrer le scan
    gmp.start_task(task_id)

    # Wait for the scan to complete and retrieve the results
    # report_id = gmp.get_task(task_id).xpath('task/last_report/report/@id')[0]
    # report_xml = gmp.get_report(report_id)
    # report = transform(report_xml)

    # Extract and display vulnerability information
    # results = report.xpath('report/results/result')
    # severity_counts = {'High': 0, 'Medium': 0, 'Low': 0}
    #
    # for result in results:
    #     severity = result.xpath('severity/text()')[0]
    #     if float(severity) >= 7.0:
    #         severity_counts['High'] += 1
    #     elif float(severity) >= 4.0:
    #         severity_counts['Medium'] += 1
    #     else:
    #         severity_counts['Low'] += 1
    #
    # print("Summary of detected vulnerabilities:")
    # print(f"High severity vulnerabilities: {severity_counts['High']}")
    # print(f"Medium severity vulnerabilities: {severity_counts['Medium']}")
    # print(f"Low severity vulnerabilities: {severity_counts['Low']}")
