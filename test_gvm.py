#from gvm.connections import UnixSocketConnection
from gvm.connections import TLSConnection
from gvm.errors import GvmError
from gvm.protocols.latest import Gmp
from gvm.transforms import EtreeTransform
from gvm.xml import pretty_print
import time

# Établir une connexion locale à OpenVAS
# connection = UnixSocketConnection()
connection = TLSConnection(hostname='192.168.221.163', port=9392, password='b7338ac4-f405-4218-95cc-740895126368')

# Utiliser une transformation pour gérer les réponses XML
transform = EtreeTransform()

# Utiliser le contexte 'with' pour gérer automatiquement la connexion et la déconnexion
with Gmp(connection=connection, transform=transform) as gmp:
    # Authentification avec le nom d'utilisateur et le mot de passe de l'administrateur
    # gmp.authenticate('admin', 'b7338ac4-f405-4218-95cc-740895126368')

    # Exemple pour récupérer la version du serveur GMP
    version = gmp.get_version()
    pretty_print(version)

    # Créer une tâche de scan (remplacer par les paramètres réels nécessaires)
    task_id = gmp.create_task(
        name='Example Scan',
        scanner_id='08b69003-5fc2-4037-a479-93b440211c73',  # ID du scanner OpenVAS
        config_id='daba56c8-73ec-11df-a475-002264764cea',  # ID de configuration du scan (ex: Full and fast)
        target_id='e0aa385d-fab6-44ad-ba8c-61996cbddd42'  # ID du target à scanner

    ).get('id')

    # Démarrer le scan
    gmp.start_task(task_id)

    # Fonction pour vérifier si le rapport est disponible
    def get_report_id(gmp, task_id):
        try:
            report_id = gmp.get_task(task_id).xpath('task/last_report/report/@id')[0]
            return report_id
        except IndexError:
            print("Le rapport n'est pas encore disponible.")
            return None

    # Vérifie si la tâche est terminée
    def is_task_complete(gmp, task_id):
        task_status = gmp.get_task(task_id).xpath('task/status/text()')[0]
        return task_status == 'Done'


    # Attend que le scan se termine
    while not is_task_complete(gmp, task_id):
        print("Scan is still running...")
        time.sleep(30)  # Attendre 30s un peu avant de réessayer

    print("Scan completed")

    # Récupérer le rapport de scan
    report_id = None
    while report_id is None:
        report_id = get_report_id(gmp, task_id)
        if report_id is None:
            print("En attente du rapport...")
            time.sleep(10)  # Attendre 10s un peu avant de réessayer

    try:
        report_id = gmp.get_task(task_id).xpath('task/last_report/report/@id')[0]
        report_xml = gmp.get_report(report_id)
        pretty_print(report_xml)
        # report = transform(report_xml)
        #
        # # Extrait les informations pertinentes
        # results = report.xpath('report/results/result')
        # severity_counts = {'High': 0, 'Medium': 0, 'Low': 0}
        #
        # for result in results:
        #     severity = result.xpath('severity/text()')[0]
        #     if float(severity) >= 7.0:
        #         severity_counts['High'] += 1
        #     elif float(severity) >= 4.0:
        #         severity_counts['Medium'] += 1
        #     else:
        #         severity_counts['Low'] += 1

        # print("Summary of detected vulnerabilities:")
        # print(f"High severity vulnerabilities: {severity_counts['High']}")
        # print(f"Medium severity vulnerabilities: {severity_counts['Medium']}")
        # print(f"Low severity vulnerabilities: {severity_counts['Low']}")

    except GvmError as e:
        print(f"An error occurred: {e}")
    except IndexError:
        print("Failed to retrieve report ID. The task might not have completed successfully.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
