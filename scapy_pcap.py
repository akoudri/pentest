from scapy.all import *
from scapy.layers.inet import IP
from docx import Document
from docx.shared import Inches
import plotly.graph_objects as go
import io
import pandas as pd


def get_ip_stats(packets):
    rows = []
    for pkt in packets:
        if IP in pkt:
            src_ip = pkt[IP].src
            dst_ip = pkt[IP].dst
            rows.append({'IP': src_ip, 'Direction': 'out'})
            rows.append({'IP': dst_ip, 'Direction': 'in'})

    df = pd.DataFrame(rows)
    ip_stats = df.groupby(['IP', 'Direction']).size().unstack(fill_value=0)
    ip_stats['Total'] = ip_stats['in'] + ip_stats['out']
    ip_stats.sort_values('Total', ascending=False, inplace=True)

    return ip_stats


def generate_report(ip_stats, top_n=5):
    top_ips = ip_stats.head(top_n)

    # Create a new Word document
    document = Document()

    # Add a title
    document.add_heading('Network Traffic Analysis Report', 0)

    # Add a paragraph with information about the most active IP addresses
    document.add_heading('Top {} Most Active IP Addresses'.format(top_n), level=1)
    for i, (ip, stats) in enumerate(top_ips.iterrows(), start=1):
        document.add_paragraph("{}. {} - Incoming packets: {}, Outgoing packets: {}".format(
            i, ip, stats['in'], stats['out']))

    # Create the bar chart with Plotly
    ips = top_ips.index.tolist()
    incoming = top_ips['in'].tolist()
    outgoing = top_ips['out'].tolist()

    fig = go.Figure(data=[
        go.Bar(name='Incoming Packets', x=ips, y=incoming),
        go.Bar(name='Outgoing Packets', x=ips, y=outgoing)
    ])
    fig.update_layout(
        title='Top {} Most Active IP Addresses'.format(top_n),
        xaxis_title='IP Address',
        yaxis_title='Number of Packets',
        barmode='group',
        height=400
    )

    # Save the chart as an image
    img_bytes = fig.to_image(format="png")
    img_stream = io.BytesIO(img_bytes)

    # Add the chart to the Word document
    document.add_picture(img_stream, width=Inches(6))

    # Save the Word document
    document.save('rapport_analyse_trafic.docx')
    print("The report has been successfully generated: rapport_analyse_trafic.docx")

# Charger le fichier PCAP
packets = rdpcap('wireshark/geoip.pcap')

# Obtenir les statistiques IP
ip_stats = get_ip_stats(packets)

# Afficher les 5 adresses IP les plus fréquentes
print(get_ip_stats(packets).head())

# Générer le rapport
generate_report(ip_stats)

